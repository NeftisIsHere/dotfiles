# ---------------------
# Yazi Wrapper
# ---------------------
function yy() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# ---------------------
# Virtual Environments
# ---------------------
# Set default if XDG_STATE_HOME is not set
: "${XDG_STATE_HOME:=$HOME/.local/state}"
VENV_HOME="$XDG_STATE_HOME/venvs"

# List all virtual environments
lsvenv() {
    if [ -d "$VENV_HOME" ]; then
        echo "Available virtual environments:"
        ls -1 "$VENV_HOME"
    else
        echo "No virtual environments found"
    fi
}

# Function to activate a venv

venv() {
    if [ -z "$1" ]; then
        echo "Usage: venv <name>"
        return 1
    fi

    VENV_PATH="$VENV_HOME/$1"

    if [ -d "$VENV_PATH" ]; then
        . "$VENV_PATH/bin/activate"
    else
        echo "Virtual environment '$1' not found at $VENV_PATH"
        return 2
    fi
}

# Function to create a venv
mkvenv() {
    if [ -z "$1" ]; then
        echo "Usage: mkvenv <name>"
        return 1
    fi

    mkdir -p "$VENV_HOME"
    python3 -m venv "$VENV_HOME/$1"
    echo "Created virtual environment at $VENV_HOME/$1"
}

# Remove a venv
rmvenv() {
    if [ -z "$1" ]; then
        echo "Usage: rmvenv <name>"
        return 1
    fi
    
    if [ -d "$VENV_HOME/$1" ]; then
        rm -rf "$VENV_HOME/$1"
        echo "Removed virtual environment '$1'"
    else
        echo "Virtual environment '$1' not found"
        return 2
    fi
}